{"version":3,"sources":["components/Jumbotron/index.js","components/Header/index.js","components/Cards/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","style","height","paddingTop","backgroundImage","className","Header","props","children","score","topScore","Cards","aria-label","animate","src","image","onClick","handleClick","id","alt","index","state","data","message","randomizeData","sort","a","b","Math","random","cardClicked","guessed","updatedData","map","char","clicked","setState","max","resetData","this","key","img","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0kCAciBA,MAXjB,WACI,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,WAAY,IAAKC,gBAAgB,oCACvDC,UAAU,e,MCgBDC,MApBjB,SAAgBC,GACZ,OACE,gCACC,4BACE,4BACC,wDAED,4BACC,2BAAIA,EAAMC,WAEX,sCACSD,EAAME,MADf,iBACoCF,EAAMG,a,aCXpC,SAASC,EAAMJ,GAC1B,OACE,yBACIK,aAAW,aACXP,UAAS,eAAUE,EAAMM,QAAS,sBAAuB,IACzDC,IAAKP,EAAMQ,MACXC,QAAS,kBAAMT,EAAMU,YAAYV,EAAMW,KACvCC,IAAI,wB,wOCDOC,E,2MAAwBC,MAAQ,CAC7CC,KAAMA,EACNb,MAAO,EACPC,SAAU,EACVa,QAAS,4B,EAGbC,cAAgB,SAAAF,GACZ,OAAOA,EAAKG,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,a,EAGtDC,YAAc,SAAAZ,GACV,IAAIa,GAAQ,EACNC,EAAc,EAAKX,MAAMC,KAAKW,KAAI,SAAAC,GAOpC,OANIA,EAAKhB,KAAOA,IACTgB,EAAKC,UACRD,EAAKC,SAAU,EACfJ,GAAU,IAGPG,KAEX,IAAe,IAAZH,EAAkB,CACjB,IAAItB,EAAQ,EAAKY,MAAMZ,MACvBA,IACA,EAAK2B,SACD,CACI3B,MAAOA,EACPC,SAAUkB,KAAKS,IAAI5B,EAAO,EAAKY,MAAMX,UACrCY,KAAM,EAAKE,cAAcQ,GACzBT,QAAS,+BAGd,CACH,IAAMe,EAAYhB,EAAKW,KAAI,SAAAC,GAAI,O,yVAAA,IAAUA,EAAV,CAAgBC,SAAS,OAExD,EAAKC,SAAS,CACVd,KAAM,EAAKE,cAAcc,GACzB7B,MAAO,EACPc,QAAS,+B,wEAKX,IAAD,OACL,OACI,yBAAKlB,UAAU,kBACf,kBAAC,EAAD,CAAQI,MAAO8B,KAAKlB,MAAMZ,MAAOC,SAAU6B,KAAKlB,MAAMX,UACjD6B,KAAKlB,MAAME,SAEhB,kBAAC,EAAD,MAEA,yBAAKlB,UAAU,aAEPkC,KAAKlB,MAAMC,KAAKW,KAAI,SAAAC,GAAI,OACpB,yBAAK7B,UAAU,YACX,kBAACM,EAAD,CACI6B,IAAKN,EAAKhB,GACVA,GAAIgB,EAAKhB,GACTH,MAAOmB,EAAKO,IACZ5B,SAAU,EAAKQ,MAAMZ,OAAS,EAAKY,MAAMX,SACzCyB,QAASD,EAAKC,QACdlB,YAAa,EAAKa,wB,GA9DfY,a,MCIpBC,MARf,WACE,OACE,6BACA,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.00f265ac.chunk.js","sourcesContent":["  \r\nimport React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n      <div\r\n        style={{ height: 300, paddingTop: 120, backgroundImage: `url(\"assets/images/voyager.jpg\")`}}\r\n        className=\"jumbotron\"\r\n      >\r\n       \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n      <header>\r\n       <ul>\r\n         <li>\r\n          <strong>Voyager Memory Game</strong>\r\n         </li>\r\n         <li>\r\n          <p>{props.children}</p> \r\n         </li>\r\n         <li>\r\n          Score: {props.score} | Top Score: {props.topScore}\r\n         </li>\r\n            \r\n       </ul>\r\n        \r\n      </header>\r\n    );\r\n  }\r\n  \r\n  export default Header;","import React from 'react'\r\nimport \"./style.css\";\r\n\r\nexport default function Cards(props) {\r\n    return (\r\n      <img\r\n          aria-label=\"click item\"\r\n          className={`card ${props.animate? \"animated shake 0.5s\": \"\"}`} \r\n          src={props.image}\r\n          onClick={() => props.handleClick(props.id)}\r\n          alt=\"Star Trek Character\"\r\n      /> \r\n    )\r\n  }","import Jumbotron from \"../Jumbotron\";\r\nimport Header from \"../Header\";\r\nimport React, { Component } from 'react';\r\nimport data from \"../../Data\";\r\nimport Cards from \"../Cards\";\r\n\r\n\r\nimport \"./style.css\";\r\n\r\nexport default class index extends Component{state = {\r\n        data: data,\r\n        score: 0,\r\n        topScore: 0,\r\n        message: \"Click an image to begin!\"\r\n    }\r\n\r\n    randomizeData = data => {\r\n        return data.sort(function(a, b){return 0.5 - Math.random()});\r\n    }\r\n  \r\n    cardClicked = id => {\r\n        var guessed=false;\r\n        const updatedData = this.state.data.map(char => {\r\n            if (char.id === id) {\r\n              if (!char.clicked) {\r\n                char.clicked = true;\r\n                guessed = true;\r\n              }\r\n            }\r\n            return char;     \r\n        }); \r\n        if(guessed === true) {\r\n            var score = this.state.score;\r\n            score++;\r\n            this.setState(\r\n                {\r\n                    score: score,\r\n                    topScore: Math.max(score, this.state.topScore),\r\n                    data: this.randomizeData(updatedData),\r\n                    message: \"You guessed correctly!\"\r\n\r\n                });\r\n        } else {\r\n            const resetData = data.map(char => ({ ...char, clicked: false }));\r\n\r\n            this.setState({\r\n                data: this.randomizeData(resetData),\r\n                score: 0,\r\n                message: \"You guessed incorrectly!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"animate fadein\"> \r\n            <Header score={this.state.score} topScore={this.state.topScore}>\r\n                {this.state.message}\r\n            </Header>\r\n            <Jumbotron> \r\n            </Jumbotron> \r\n            <div className=\"container\">\r\n                {\r\n                    this.state.data.map(char => (\r\n                        <div className=\"animated\">\r\n                            <Cards\r\n                                key={char.id}\r\n                                id={char.id} \r\n                                image={char.img}\r\n                                animate={!this.state.score && this.state.topScore}\r\n                                clicked={char.clicked}\r\n                                handleClick={this.cardClicked}\r\n                            />      \r\n                        </div>  \r\n                    ))\r\n                }\r\n            </div> \r\n            \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Game from \"./components/Game\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n    <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}